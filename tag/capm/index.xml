<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>capm | Data Shenanigans</title>
    <link>/tag/capm/</link>
      <atom:link href="/tag/capm/index.xml" rel="self" type="application/rss+xml" />
    <description>capm</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2020</copyright><lastBuildDate>Tue, 24 May 2016 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/logo.svg</url>
      <title>capm</title>
      <link>/tag/capm/</link>
    </image>
    
    <item>
      <title>A Gentle Introduction to Finance using R: Efficient Frontier and CAPM - Part 1</title>
      <link>/blog/2016-05-24-gentle-capm-i/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate>
      <guid>/blog/2016-05-24-gentle-capm-i/</guid>
      <description>


&lt;p&gt;The following entry explains a basic principle of finance, the so-called efficient frontier and thus serves as a gentle introduction into one area of finance: “portfolio theory” using R.
A second part will then concentrate on the Capital-Asset-Pricing-Method (CAPM) and its assumptions, implications and drawbacks.&lt;/p&gt;
&lt;p&gt;Note: All code that is needed for the simulations, data manipulation, and plots that is not explicitly shown in this blogpost can be found on my &lt;a href=&#34;https://github.com/DavZim/Efficient_Frontier&#34;&gt;Github page&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;One of the basic concepts of finance is the risk-return tradeoff.
As an illustrative example: If I were to offer you two investments with the same risk but with different expected returns, you would take the investment with the higher return (a closer look on what is meant by the terms risk and expected return follows later).
If the two investments had the same expected return but different levels of risk, most people would choose the investment with less risk.
This behaviour is called risk-aversion.&lt;/p&gt;
&lt;p&gt;But what happens if you have to make the decision between a strategy of how to distribute an investment worth of $100.000 between the 30 companies listed in the the German DAX index, the 100 companies from Britain’s FTSE, the 500 companies from the S&amp;amp;P 500, or if you have the (most realistic) option to invest in all listed stocks in the world?
How would you distribute the cash to create a promising portfolio?&lt;/p&gt;
&lt;p&gt;This is the question Markowitz tried to answer in 1952 in his paper “Portfolio Selection”.
Now, many years later, many academics and practitioners have added their answers to the discussion, advancing the discussion, but Markowitz’s solution is still considered to be a fundamental piece of finance.
His portfolio selection advanced into the now called “Capital Asset Pricing Model” or short CAPM.
The &lt;a href=&#34;http://www.rinfinance.com/agenda/&#34;&gt;R/Finance conference 2016&lt;/a&gt; alone lists at least 4 entries that are directly linked to portfolio theory and the CAPM.
So what exactly is the CAPM doing, what are its implications, assumptions, what are its drawbacks, and for us most importantly, how can we leverage R to calculate it?&lt;/p&gt;
&lt;p&gt;Let’s create a hands-on example to illustrate the theory:
We begin by looking at three different, well-known stocks of the Dow-Jones Industrial Average: IBM (&lt;code&gt;IBM&lt;/code&gt;), Google/Alphabet (&lt;code&gt;GOOG&lt;/code&gt;), and JP Morgan (&lt;code&gt;JPM&lt;/code&gt;).
I have gathered monthly data since 2000 from Yahoo using the &lt;code&gt;quantmod&lt;/code&gt;-library and saved it to my &lt;a href=&#34;https://github.com/DavZim/Efficient_Frontier&#34;&gt;Github-page&lt;/a&gt; (including the script to gather the data).
We can load the data and plot an indexed price with the following code (notice, I use &lt;code&gt;data.table&lt;/code&gt; for data storage and manipulation, but of course you can use &lt;code&gt;dplyr&lt;/code&gt;, or base-r as well)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)
library(scales)
library(ggplot2)

link &amp;lt;- &amp;quot;https://raw.githubusercontent.com/DavZim/Efficient_Frontier/master/data/fin_data.csv&amp;quot;
dt &amp;lt;- fread(link)
dt[, date := as.Date(date)]

# create indexed values
dt[, idx_price := price/price[1], by = ticker]

# plot the indexed values
ggplot(dt, aes(x = date, y = idx_price, color = ticker)) +
  geom_line() +
  # Miscellaneous Formatting
  theme_bw() + ggtitle(&amp;quot;Price Developments&amp;quot;) +
  xlab(&amp;quot;Date&amp;quot;) + ylab(&amp;quot;Price\n(Indexed 2000 = 1)&amp;quot;) +
  scale_color_discrete(name = &amp;quot;Company&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2016-05-24-gentle-capm-i_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Altough we can see that Google outperformed the other two, we can also see that it seems it was risikier to invest in Google, as shown by the large spikes and drawdowns.
This is the principle of risk-return tradeoff that is fundamental to the CAPM.
Usually, risk is defined as volatility, which is defined as the standard deviation of the returns
.
On the other hand, return is either calculated using arithmetic or logarithmic returns (for simplicity I use arithmetic returns in this post, more on the mathematics of returns can be found in the appendix of this post).
To visualise the tradeoff, we can compute the mean and standard deviation for returns in a table or plot the two measures against each other.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# calculate the arithmetic returns
dt[, ret := price / shift(price, 1) - 1, by = ticker]

# summary table
# take only non-na values
tab &amp;lt;- dt[!is.na(ret), .(ticker, ret)]

# calculate the expected returns (historical mean of returns) and
# volatility (standard deviation of returns)
tab &amp;lt;- tab[, .(er = round(mean(ret), 4), 
               sd = round(sd(ret), 4)), 
           by = &amp;quot;ticker&amp;quot;]
tab&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    ticker     er     sd
## 1:    IBM 0.0040 0.0554
## 2:   GOOG 0.0217 0.0801
## 3:    JPM 0.0064 0.0741&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The table &lt;code&gt;tab&lt;/code&gt; shows that Google had the highest expected return and also the highest volatility, whereas IBM had the lowest figures, both in terms of expected returns and volatility.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Ticker&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Expected Return&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Volatility&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;IBM&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.41%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.55%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;GOOG&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.21%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.03%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;JPM&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.64%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.43%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;One visualisation you will have with no doubt already come across if you know a bit about the CAPM is a plot regarding this risk-return tradeoff, with the risk (volatility) on the x-axis, the expected returns on the y-axis and dots for each asset/company.
In our example it looks like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(tab, aes(x = sd, y = er, color = ticker)) +
  geom_point(size = 5) +
  # Miscellaneous Formatting
  theme_bw() + ggtitle(&amp;quot;Risk-Return Tradeoff&amp;quot;) +
  xlab(&amp;quot;Volatility&amp;quot;) + ylab(&amp;quot;Expected Returns&amp;quot;) +
  scale_y_continuous(label = percent, limits = c(0, 0.03)) +
  scale_x_continuous(label = percent, limits = c(0, 0.1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2016-05-24-gentle-capm-i_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Given that you had to take only a single stock and given past performance indicates future performance (more on the assumptions later, but for now: historic performances almost never indicates future performances), you would probably choose Google as your best investment choice.
However, the exclusive option is not realistic as there is something called diversification and you can reduce risk by buying multiple stocks.&lt;/p&gt;
&lt;p&gt;Coming back to the examples from the beginning: If you had the choice between three fictive investments A (expected return of 5%, volatility of 4%), B (exp ret of 5%, volatility of 5%), or C (exp ret 6%, volatility of 5%), you would prefer A over B (we say A is efficient to B) as it has less volatility, and C over B as it has a higher expected return.
However, we cannot compare A and C withouth further knowledge.
In summary, the higher a point on the graph is to the left, the more favorable an asset is (higher expected return and less volatility).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;risk-tradeoffs.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we combine assets into a new portfolio that contains stocks from two companies, our portfolio also has an expected risk-return tradeoff.
The crux is to calculate these values for a given set of (multiple) assets and find an optimum portfolio.
This is what we will do next.
We will start with just two assets to show the main principles, then we will add a third asset to show how to find the so-called efficient frontier, lastly we will look into different options and constraints when calculating the efficient frontier.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;calculating-the-risk-return-tradeoff-of-a-portfolio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Calculating the Risk-Return Tradeoff of a Portfolio&lt;/h2&gt;
&lt;div id=&#34;two-assets&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Two Assets&lt;/h3&gt;
&lt;p&gt;Given a portfolio consisting of two assets with a share of stock x of &lt;span class=&#34;math inline&#34;&gt;\(\omega_x\)&lt;/span&gt; and a share of stock y of &lt;span class=&#34;math inline&#34;&gt;\(\omega_y = 1 - \omega_x\)&lt;/span&gt; (as we invest all of the cash, we get the constraint that the weights add up to one, so that &lt;span class=&#34;math inline&#34;&gt;\(0 \leq \omega_x \leq 1\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(0 \leq \omega_y \leq 1\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(\omega_x + \omega_y = 1\)&lt;/span&gt;).
Take an equally weighted portfolio as an example, where stock x (say Google) makes 50% of the portfolio (&lt;span class=&#34;math inline&#34;&gt;\(\omega_x = 0.5\)&lt;/span&gt;) and stock y (i.e., IBM) makes up for the other 50% of the value (&lt;span class=&#34;math inline&#34;&gt;\(\omega_y = 1 - \omega_x = 0.5\)&lt;/span&gt;).
What are the expected returns and volatility of the portfolio containing the two assets?
Is it a direct linear combination of the two? Not necessarily.
The expected values are a function of the correlation &lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt; between the returns of the assets.
If the returns are perfectly correlated (&lt;span class=&#34;math inline&#34;&gt;\(\rho = 1\)&lt;/span&gt;), a portfolio would lie on this line, however, the returns are most likely not perfectly correlated.
The next plot shows the possible values a portfolio will take between two simulated return series given a certain correlation, the maths behind calculating this will be explained in a bit).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;correlation_example.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that the lower the correlation between two stocks is, the better it is for diversification purposes (remember usuallyy higher expected return (up) and lower volatility (left) is better).
In the case of a perfect negative correlation (&lt;span class=&#34;math inline&#34;&gt;\(\rho = - 1\)&lt;/span&gt;) we could diversify all risk away (of course, reality has most likely no cases where two assets have a perfect positive or negative correlation).&lt;/p&gt;
&lt;p&gt;To calculate the expected return &lt;span class=&#34;math inline&#34;&gt;\(\hat{r}_p\)&lt;/span&gt; and the expected volatility &lt;span class=&#34;math inline&#34;&gt;\(\sigma_p\)&lt;/span&gt; of a portfolio, we need to use the following formulae, wich include the weights &lt;span class=&#34;math inline&#34;&gt;\(\omega\)&lt;/span&gt; for asset x and y, the expected returns &lt;span class=&#34;math inline&#34;&gt;\(\hat{r}\)&lt;/span&gt;, the expected risk &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; (standard deviations), as well as the covariance &lt;span class=&#34;math inline&#34;&gt;\(\sigma_{x,y}\)&lt;/span&gt; (which is closely related to the correlation) for the two stocks.&lt;/p&gt;
&lt;p&gt;We get the expected return for the portfolio with&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{r}_p = \omega_x \hat{r}_x+ \omega_y \hat{r}_y
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;and the expected volatility with&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\sigma_p = \sqrt{\omega_x^2 \sigma_x^2 + \omega_y^2 \sigma_y^2 + 2 \omega_x \omega_y \sigma_{x,y}} 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Given that the correlation between two series can be expressed as a product of their covariance and their respective standard deviations (&lt;span class=&#34;math inline&#34;&gt;\(\sigma_{x,y} = \rho_{x,y} \sigma_x \sigma_y\)&lt;/span&gt;), we can see why the portfolio is relying on the correlation between the inputs.&lt;/p&gt;
&lt;p&gt;I simulated returns for multiple assets already (the code can be obtained here: &lt;a href=&#34;https://github.com/DavZim/Efficient_Frontier/blob/master/R/create_multiple_asset_dataset.R&#34;&gt;create_multiple_asset_dataset.R&lt;/a&gt;).
Using the maths we can calculate the expected return and volatility for a portfolio for given shares.
As we want to see how good our portfolio is, we calculate not one, but many possible portfolios that have a share of &lt;span class=&#34;math inline&#34;&gt;\(0\leq \omega_x \leq 1\)&lt;/span&gt; (Given that we cannot borrow money, we have the restriction &lt;span class=&#34;math inline&#34;&gt;\(\omega_x + \omega_y = 1\)&lt;/span&gt;, thus we only have &lt;span class=&#34;math inline&#34;&gt;\(\omega_x\)&lt;/span&gt; as a variable and not &lt;span class=&#34;math inline&#34;&gt;\(\omega_y\)&lt;/span&gt;).
First we have to load the returns, then we calculate the necessary values, in the last step we calculate the expected values for the portfolio.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# load the data
link &amp;lt;- &amp;quot;https://raw.githubusercontent.com/DavZim/Efficient_Frontier/master/data/mult_assets.csv&amp;quot;
mult_assets &amp;lt;- fread(link)

# calculate the necessary values:
# I) expected returns for the two assets
er_x &amp;lt;- mean(mult_assets$x)
er_y &amp;lt;- mean(mult_assets$y)

# II) risk (standard deviation) as a risk measure
sd_x &amp;lt;- sd(mult_assets$x)
sd_y &amp;lt;- sd(mult_assets$y)

# III) covariance
cov_xy &amp;lt;- cov(mult_assets$x, mult_assets$y)

# create 1000 portfolio weights (omegas)
x_weights &amp;lt;- seq(from = 0, to = 1, length.out = 1000)

# create a data.table that contains the weights for the two assets
two_assets &amp;lt;- data.table(wx = x_weights,
                         wy = 1 - x_weights)

# calculate the expected returns and standard deviations for the 
# 1000 possible portfolios
two_assets[, &amp;#39;:=&amp;#39; (er_p = wx * er_x + wy * er_y,
                   sd_p = sqrt(wx^2 * sd_x^2 +
                                 wy^2 * sd_y^2 +
                                 2 * wx * (1 - wx) * cov_xy))]
two_assets&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                wx          wy       er_p       sd_p
##    1: 0.000000000 1.000000000 0.03000000 0.01973497
##    2: 0.001001001 0.998998999 0.03004001 0.01971606
##    3: 0.002002002 0.997997998 0.03008001 0.01969728
##    4: 0.003003003 0.996996997 0.03012002 0.01967863
##    5: 0.004004004 0.995995996 0.03016002 0.01966010
##   ---                                              
##  996: 0.995995996 0.004004004 0.06980549 0.04979363
##  997: 0.996996997 0.003003003 0.06984550 0.04984333
##  998: 0.997997998 0.002002002 0.06988550 0.04989305
##  999: 0.998998999 0.001001001 0.06992551 0.04994277
## 1000: 1.000000000 0.000000000 0.06996551 0.04999250&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# lastly plot the values
ggplot() +
  geom_point(data = two_assets, aes(x = sd_p, y = er_p, color = wx)) +
  geom_point(data = data.table(sd = c(sd_x, sd_y), mean = c(er_x, er_y)),
             aes(x = sd, y = mean), color = &amp;quot;red&amp;quot;, size = 3, shape = 18) +
  # Miscellaneous Formatting
  theme_bw() + ggtitle(&amp;quot;Possible Portfolios with Two Risky Assets&amp;quot;) +
  xlab(&amp;quot;Volatility&amp;quot;) + ylab(&amp;quot;Expected Returns&amp;quot;) +
  scale_y_continuous(label = percent, 
                     limits = c(0, max(two_assets$er_p) * 1.2)) +
  scale_x_continuous(label = percent, 
                     limits = c(0, max(two_assets$sd_p) * 1.2)) +
  scale_color_continuous(name = expression(omega[x]), labels = percent)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2016-05-24-gentle-capm-i_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;With the color coding we can see that the upper point stands for stock x (&lt;span class=&#34;math inline&#34;&gt;\(\omega_x = 100%\)&lt;/span&gt;) and the lower point stands for stock y (&lt;span class=&#34;math inline&#34;&gt;\(\omega_x = 0%\)&lt;/span&gt;, thus &lt;span class=&#34;math inline&#34;&gt;\(\omega_y = 100%\)&lt;/span&gt;).
We also see that all possible portfolios lay on a curve.
That means the line stands for all possible portfolios combining the two assets.
This will change if we add a third asset.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-a-third-asset&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Adding a Third Asset&lt;/h3&gt;
&lt;p&gt;Adding a third asset to the portfolio expands the formula.
For the portfolio we get an expected return of&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{r}_p = \omega_x \hat{r}_x + \omega_y \hat{r}_y + \omega_z \hat{r}_z
\]&lt;/span&gt;
and an expected standard deviation of&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\sigma_p = \sqrt{\omega_x^2 \sigma_x^2 + \omega_y^2 \sigma_y^2 + \omega_z^2 \sigma_z^2 +
2 \omega_x \omega_y \sigma_{x,y} + 2 \omega_x \omega_z \sigma_{x,z} + 2 \omega_y \omega_z \sigma_{y,z}}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Doing this in R is fairly easy once you understand the last code-chunk for two assets.
By expanding it we get the following&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# calculate the necessary values:
# I) expected returns for the two assets
er_x &amp;lt;- mean(mult_assets$x)
er_y &amp;lt;- mean(mult_assets$y)
er_z &amp;lt;- mean(mult_assets$z)

# II) risk (standard deviation) as a risk measure
sd_x &amp;lt;- sd(mult_assets$x)
sd_y &amp;lt;- sd(mult_assets$y)
sd_z &amp;lt;- sd(mult_assets$z)

# III) covariance
cov_xy &amp;lt;- cov(mult_assets$x, mult_assets$y)
cov_xz &amp;lt;- cov(mult_assets$x, mult_assets$z)
cov_yz &amp;lt;- cov(mult_assets$y, mult_assets$z)

# create portfolio weights (omegas)
x_weights &amp;lt;- seq(from = 0, to = 1, length.out = 1000)

# create a data.table that contains the weights for the three assets
three_assets &amp;lt;- data.table(wx = rep(x_weights, each = length(x_weights)),
                           wy = rep(x_weights, length(x_weights)))

three_assets[, wz := 1 - wx - wy]


# calculate the expected returns and standard deviations for the 1000 possible portfolios
three_assets[, &amp;#39;:=&amp;#39; (er_p = wx * er_x + wy * er_y + wz * er_z,
                     sd_p = sqrt(wx^2 * sd_x^2 +
                                   wy^2 * sd_y^2 +
                                   wz^2 * sd_z^2 +
                                   2 * wx * wy * cov_xy +
                                   2 * wx * wz * cov_xz +
                                   2 * wy * wz * cov_yz))]

# take out cases where we have negative weights (shortselling)
three_assets &amp;lt;- three_assets[wx &amp;gt;= 0 &amp;amp; wy &amp;gt;= 0 &amp;amp; wz &amp;gt;= 0] 
three_assets&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               wx          wy           wz       er_p       sd_p
##      1: 0.000000 0.000000000 1.000000e+00 0.04000000 0.03005254
##      2: 0.000000 0.001001001 9.989990e-01 0.03998999 0.03002259
##      3: 0.000000 0.002002002 9.979980e-01 0.03997998 0.02999265
##      4: 0.000000 0.003003003 9.969970e-01 0.03996997 0.02996272
##      5: 0.000000 0.004004004 9.959960e-01 0.03995996 0.02993281
##     ---                                                        
## 500348: 0.996997 0.003003003 4.336809e-17 0.06984550 0.04984333
## 500349: 0.997998 0.000000000 2.002002e-03 0.06990552 0.04989176
## 500350: 0.997998 0.001001001 1.001001e-03 0.06989551 0.04989239
## 500351: 0.998999 0.000000000 1.001001e-03 0.06993552 0.04994212
## 500352: 1.000000 0.000000000 0.000000e+00 0.06996551 0.04999250&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# lastly plot the values
ggplot() +
  geom_point(data = three_assets, aes(x = sd_p, y = er_p, color = wx - wz)) +
  geom_point(data = data.table(sd = c(sd_x, sd_y, sd_z), mean = c(er_x, er_y, er_z)),
             aes(x = sd, y = mean), color = &amp;quot;red&amp;quot;, size = 3, shape = 18) +
  # Miscellaneous Formatting
  theme_bw() + 
  ggtitle(&amp;quot;Possible Portfolios with Three Risky Assets&amp;quot;) +
  xlab(&amp;quot;Volatility&amp;quot;) + ylab(&amp;quot;Expected Returns&amp;quot;) +
  scale_y_continuous(label = percent, limits = c(0, max(three_assets$er_p) * 1.2)) +
  scale_x_continuous(label = percent, limits = c(0, max(three_assets$sd_p) * 1.2)) +
  scale_color_gradientn(colors = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;yellow&amp;quot;),
                        name = expression(omega[x] - omega[z]), labels = percent)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2016-05-24-gentle-capm-i_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that the area of possible portfolios has expanded into a third dimension.
The colors try to show the two different weights.
A yellow color indicates a portfolio consisting mainly of the asset x, a blue color indicates asset y, and a red area indicates a portfolio of asset z.
We also see the three single asset-portfolios (the three red dots).
I hope now it also becomes clear what an efficient portfolio is.
To give an example: We have many possible portfolios that have a volatility of 2%, but only one of them is a portfolio we would take (the one with the highest expected return) as this is more efficient than the other possible portfolios with a volatility of 2% but with less expected returns.
Therefore we call the (upper) edge of all possible portfolios the efficient frontier.&lt;/p&gt;
&lt;p&gt;Generally speaking, the expected returns and standard deviations for a portfolio consisting of n-assets are
&lt;span class=&#34;math display&#34;&gt;\[
\hat{r}_p = \sum_{i=1}^{n} \omega_i \hat{r}_i
\]&lt;/span&gt;
and
&lt;span class=&#34;math display&#34;&gt;\[
\sigma_p = \sum_{i=1}^{n} \omega_i^2 \sigma_i^2 + \sum_{i=1}^{n} \sum_{j=1}^{n} \omega_i \omega_j \sigma_{i, j} \forall i \neq j
\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;calculating-the-efficient-frontier&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Calculating the Efficient Frontier&lt;/h2&gt;
&lt;p&gt;The efficient frontier can be calculated on its own without the need to simulate thousands of portfolios and then finding the efficient ones.
We have to distinguish two cases, one with short-selling (that is negative weights) and one without.
We will first look at the case without restrictions (with short-selling allowed).
So far we have restricted our portfolios to only contain positive weights (by filtering out negative weights).&lt;/p&gt;
&lt;div id=&#34;with-short-selling&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;With Short-Selling&lt;/h3&gt;
&lt;p&gt;To calculate the efficient frontier we can use the following closed-form formula that calculates the efficient frontier for a given input of risk (the input-value is thus &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;) and for some parameters (&lt;span class=&#34;math inline&#34;&gt;\(\alpha, \beta, \gamma, \delta\)&lt;/span&gt;) using matrix algebra (note, I put the formula here if someone wants to calculate it by hand; if you are just interested in the R code, you can skip the short mathematics section).&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{r}_{ef}(\sigma) = \frac{\beta}{\alpha} + \sqrt{\left(\frac{\beta}{\alpha}\right)^2 - \frac{\gamma - \delta * \sigma^2}{\alpha}},
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;which is the solution to a quadratic optimization problem.
The parameters are given by the following matrix algebra&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\alpha = 1^T s^{-1} 1,
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; is a matrix of 1’s with a length of the numbers of stocks, &lt;span class=&#34;math inline&#34;&gt;\(s\)&lt;/span&gt; is a matrix of the covariances between the assets (with a dimension of n times n).&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\beta = 1^T s^{-1} \overline{ret},
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\overline{ret}\)&lt;/span&gt; stands for a vector of average returns for each stock.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\gamma = \overline{ret}^T s^{-1} \overline{ret},
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;and lastly &lt;span class=&#34;math inline&#34;&gt;\(\delta\)&lt;/span&gt; is given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\delta = \alpha \gamma - \beta ^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the only inputs are the returns of stocks, in R we can write a short function (&lt;code&gt;calcEFParams&lt;/code&gt;) that calculates the parameters and returns a list with the parameters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calcEFParams &amp;lt;- function(rets) {
  retbar &amp;lt;- colMeans(rets, na.rm = T)
  covs &amp;lt;- var(rets, na.rm = T) # calculates the covariance of the returns
  invS &amp;lt;- solve(covs)
  i &amp;lt;- matrix(1, nrow = length(retbar))
  
  alpha &amp;lt;- t(i) %*% invS %*% i
  beta &amp;lt;- t(i) %*% invS %*% retbar
  gamma &amp;lt;- t(retbar) %*% invS %*% retbar
  delta &amp;lt;- alpha * gamma - beta * beta
  
  retlist &amp;lt;- list(alpha = as.numeric(alpha),
                  beta = as.numeric(beta),
                  gamma = as.numeric(gamma),
                  delta = as.numeric(delta))
  
  return(retlist)
}

abcds &amp;lt;- calcEFParams(mult_assets)
abcds&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $alpha
## [1] 4037.551
## 
## $beta
## [1] 147.8334
## 
## $gamma
## [1] 5.992395
## 
## $delta
## [1] 2339.881&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calcEFValues &amp;lt;- function(x, abcd, upper = T) {
  alpha &amp;lt;- abcd$alpha
  beta &amp;lt;- abcd$beta
  gamma &amp;lt;- abcd$gamma
  delta &amp;lt;- abcd$delta
  
  if (upper) {
    retval &amp;lt;- beta / alpha + sqrt((beta / alpha) ^ 2 - (gamma - delta * x ^ 2) / (alpha))
  } else {
    retval &amp;lt;- beta / alpha - sqrt((beta / alpha) ^ 2 - (gamma - delta * x ^ 2) / (alpha))
  }
  
  return(retval)
}

# calculate the risk-return tradeoff the two assets (for plotting the points)
df_table &amp;lt;- melt(mult_assets)[, .(er = mean(value),
                                  sd = sd(value)), by = variable]

# plot the values
ggplot(df_table, aes(x = sd, y = er)) +
  # add the stocks
  geom_point(size = 4, color = &amp;quot;red&amp;quot;, shape = 18) +
  # add the upper efficient frontier
  stat_function(fun = calcEFValues, args = list(abcd = abcds, upper = T), n = 10000,
                color = &amp;quot;red&amp;quot;, size = 1) +
  # add the lower &amp;quot;efficient&amp;quot; frontier
  stat_function(fun = calcEFValues, args = list(abcd = abcds, upper = F), n = 10000,
                color = &amp;quot;blue&amp;quot;, size = 1) +
  # Miscellaneous Formatting
  theme_bw() + ggtitle(&amp;quot;Efficient Frontier with Short-Selling&amp;quot;) +
  xlab(&amp;quot;Volatility&amp;quot;) + ylab(&amp;quot;Expected Returns&amp;quot;) +
  scale_y_continuous(label = percent, limits = c(0, max(df_table$er) * 1.2)) +
  scale_x_continuous(label = percent, limits = c(0, max(df_table$sd) * 1.2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2016-05-24-gentle-capm-i_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Given the values for &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(\delta\)&lt;/span&gt; we receive the function for the frontier as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{r}_{ef}(\sigma) = \frac{147.8}{4037.6} \pm \sqrt{\left(\frac{147.8}{4037.6}\right)^2 - \frac{6.0 - 2339.9 * \sigma^2}{4037.6}}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The values for the &lt;code&gt;+&lt;/code&gt;-part of the function is the upper, efficient frontier, whereas the &lt;code&gt;-&lt;/code&gt;-part represents the lower, inefficient frontier.&lt;/p&gt;
&lt;p&gt;The red curve (the upper curve) is the real efficient frontier, whereas the lower (blue) curve stands for an inefficient frontier.
This is due to the fact, that we can create a mixture of the three assets that has the same volatility but a higher expected return.
As we are able to shortsell (borrow money by selling stocks that we don’t own and investing this cash) the efficient frontier doesn’t necessarily touch the three assets, nor does it end at the points but extends outwards.&lt;/p&gt;
&lt;p&gt;Although the maths is not trivial (at least when it comes to understanding), the calculation of the efficient frontier is given by a closed mathematical function and its calculation is straightforward.
This will change in the next chapter, when we add the restrictions that all weights have to be larger than zero (i.e., no short-selling).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;without-short-selling&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Without Short-Selling&lt;/h3&gt;
&lt;p&gt;Restricting the portfolio selection by only having positive weights of the assets limits the amounts of possible portfolios and introduces complexity that cannot be handled by closed-form mathematics, thus we need to fall back to mathematical optimization.
There is a wide variety of possible packages that are able to do this, I found the &lt;code&gt;portfolio.optim&lt;/code&gt;-function of the &lt;code&gt;tseries&lt;/code&gt;-package most useful.&lt;/p&gt;
&lt;p&gt;The function takes asset returns, and a desired portfolio return as an input (besides other parameters that we do not use here) and returns information about the portfolio at that desired return.
We can write a short wrapper function that gives us the efficient frontier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tseries)

df_table &amp;lt;- melt(mult_assets)[, .(er = mean(value),
                                  sd = sd(value)), by = variable]

er_vals &amp;lt;- seq(from = min(df_table$er), 
               to = max(df_table$er),
               length.out = 1000)

# find an optimal portfolio for each possible possible expected return 
# (note that the values are explicitly set between the minimum and maximum of
# the expected returns per asset)
sd_vals &amp;lt;- sapply(er_vals, function(er) {
  op &amp;lt;- try(portfolio.optim(as.matrix(mult_assets), er), 
            silent = TRUE)
  if (inherits(op, &amp;quot;try-error&amp;quot;)) return(NA)
  return(op$ps)
})

plot_dt &amp;lt;- data.table(sd = sd_vals, er = er_vals)
plot_dt &amp;lt;- plot_dt[!is.na(sd)]

# find the lower and the upper frontier
minsd &amp;lt;- min(plot_dt$sd)
minsd_er &amp;lt;- plot_dt[sd == minsd, er]
plot_dt[, efficient := er &amp;gt;= minsd_er]
plot_dt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              sd         er efficient
##   1: 0.01965715 0.03004001     FALSE
##   2: 0.01958006 0.03008001     FALSE
##   3: 0.01950373 0.03012002     FALSE
##   4: 0.01942815 0.03016002     FALSE
##   5: 0.01935335 0.03020003     FALSE
##  ---                                
## 994: 0.04965690 0.06976548      TRUE
## 995: 0.04972396 0.06980549      TRUE
## 996: 0.04979104 0.06984550      TRUE
## 997: 0.04985816 0.06988550      TRUE
## 998: 0.04992531 0.06992551      TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_point(data = plot_dt[efficient == F], aes(x = sd, y = er), size = 0.5, color = &amp;quot;blue&amp;quot;) +
  geom_point(data = plot_dt[efficient == T], aes(x = sd, y = er), size = 0.5, color = &amp;quot;red&amp;quot;) +
  geom_point(data = df_table, aes(x = sd, y = er), size = 4, color = &amp;quot;red&amp;quot;, shape = 18) +
  # Miscellaneous Formatting
  theme_bw() + ggtitle(&amp;quot;Efficient Frontier without Short-Selling&amp;quot;) +
  xlab(&amp;quot;Volatility&amp;quot;) + ylab(&amp;quot;Expected Returns&amp;quot;) +
  scale_y_continuous(label = percent, limits = c(0, max(df_table$er) * 1.2)) +
  scale_x_continuous(label = percent, limits = c(0, max(df_table$sd) * 1.2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2016-05-24-gentle-capm-i_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Comparing the two scenarios we see that restricting the weights (prohibiting short-sells), we also restrict the number of possible portfolios.
In some cases, restricting short-sells yields portfolios with less expected returns or a higher expected volatility.&lt;/p&gt;
&lt;p&gt;To directly compare the two options we can use the following code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# combine the data into one plotting data.table called &amp;quot;pdat&amp;quot;
# use plot_dt with constraints
pdat1 &amp;lt;- plot_dt[, .(sd, er, type = &amp;quot;wo_short&amp;quot;, efficient)]

# calculate the values without constraints
pdat2lower &amp;lt;- data.table(sd = seq(from = 0, to = max(pdat1$sd) * 1.2, length.out = 1000))
pdat2lower[, &amp;#39;:=&amp;#39; (er = calcEFValues(sd, abcds, F),
                   type = &amp;quot;short&amp;quot;,
                   efficient = F)]

pdat2upper &amp;lt;- data.table(sd = seq(from = 0, to = max(pdat1$sd) * 1.2, length.out = 1000))
pdat2upper[, &amp;#39;:=&amp;#39; (er = calcEFValues(sd, abcds, T),
                   type = &amp;quot;short&amp;quot;,
                   efficient = T)]

pdat &amp;lt;- rbindlist(list(pdat1, pdat2upper, pdat2lower))

# plot the values
ggplot() +
  geom_line(data = pdat, aes(x = sd, y = er, color = type, linetype = efficient), size = 1) +
  geom_point(data = df_table, aes(x = sd, y = er), size = 4, color = &amp;quot;red&amp;quot;, shape = 18) +
  # Miscellaneous Formatting
  theme_bw() + ggtitle(&amp;quot;Efficient Frontiers&amp;quot;) +
  xlab(&amp;quot;Volatility&amp;quot;) + ylab(&amp;quot;Expected Returns&amp;quot;) +
  scale_y_continuous(label = percent, limits = c(0, max(df_table$er) * 1.2)) +
  scale_x_continuous(label = percent, limits = c(0, max(df_table$sd) * 1.2)) +
  scale_color_manual(name = &amp;quot;Short-Sells&amp;quot;, values = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;), labels = c(&amp;quot;Allowed&amp;quot;, &amp;quot;Prohibited&amp;quot;)) +
  scale_linetype_manual(name = &amp;quot;Efficient&amp;quot;, values = c(2, 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2016-05-24-gentle-capm-i_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are many ways to do this and I am certainly not claiming that this is the only option for portfolio selection, but the efficient frontier is a very useful tool to understand one of the basics of finance.
The question of which portfolio of the efficient frontier is considered best within the model-frameworks, has to be left open in this part, but will be adressed using CAPM in part II.&lt;/p&gt;
&lt;p&gt;This closes the first part of the series.
The next section will look more into the CAPM, which is very closely related to the efficient frontier (many would argue that the efficient frontier is part of the CAPM) and its implications, assumptions, and drawbacks.
In the meantime, if you have questions, feedback or issues, please leave a comment or write me an email (you find my email in the about-section).&lt;/p&gt;
&lt;p&gt;Lastly, if you want to use the graphics or code for your own teaching, please contact me and make sure that you give credit and link back to my blog.
Thank you very much.
Also as a disclaimer, I am in no way giving any financial advice in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;appendix&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Appendix&lt;/h1&gt;
&lt;p&gt;One of the many issues I haven’t properly addressed in this entry is the calculation of returns.
There are a couple of ways of how to calculate the returns, most often used are arithmetic and logarithmic returns.&lt;/p&gt;
&lt;p&gt;Arithmetic Returns
&lt;span class=&#34;math display&#34;&gt;\[
r_t = \frac{P_t - P_{t-1}}{P_{t-1}} = \frac{P_t}{P_{t-1}} - 1
\]&lt;/span&gt;
Logarithmic Returns
&lt;span class=&#34;math display&#34;&gt;\[
r_t = log\left(\frac{P_t}{P_{t-1}}\right) = log(P_t) - log(P_{t-1})
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The difference between the two is enough to cover another blog post, which is what Pat of PortfolioProbe already did, so if you want to know more about the two, check out his &lt;a href=&#34;http://www.portfolioprobe.com/2010/10/04/a-tale-of-two-returns/&#34;&gt;“Tale of Two Returns”&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
